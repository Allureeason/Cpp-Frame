!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
Config	config.h	/^class Config {$/;"	c	namespace:hxf
ConfigVar	config.h	/^    ConfigVar(const std::string& name,$/;"	f	class:hxf::ConfigVar	access:public	signature:(const std::string & name,const T & default_value,const std::string & description="")
ConfigVar	config.h	/^class ConfigVar : public ConfigVarBase {$/;"	c	namespace:hxf	inherits:ConfigVarBase
ConfigVarBase	config.h	/^    ConfigVarBase(const std::string& name, const std::string& description) $/;"	f	class:hxf::ConfigVarBase	access:public	signature:(const std::string & name,const std::string & description)
ConfigVarBase	config.h	/^class ConfigVarBase{$/;"	c	namespace:hxf
ConfigVarMap	config.h	/^    typedef std::map<std::string, ConfigVarBase::ptr> ConfigVarMap;$/;"	t	class:hxf::Config	typeref:typename:std::map<std::string,ConfigVarBase::ptr>	access:public
DEBUG	log.h	/^        DEBUG = 1,$/;"	e	enum:hxf::LogLevel::Level	access:public
DateTimeFormatItem	log.cc	/^    DateTimeFormatItem(const std::string& format = "%Y:%m:%d %H:%M:%S") $/;"	f	class:hxf::DateTimeFormatItem	file:	access:public	signature:(const std::string & format="")
DateTimeFormatItem	log.cc	/^class DateTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
ERROR	log.h	/^        ERROR = 4,$/;"	e	enum:hxf::LogLevel::Level	access:public
ElapseFormatItem	log.cc	/^    ElapseFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::ElapseFormatItem	file:	access:public	signature:(const std::string & str="")
ElapseFormatItem	log.cc	/^class ElapseFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
FATAL	log.h	/^        FATAL = 5$/;"	e	enum:hxf::LogLevel::Level	access:public
FiberIdFormatItem	log.cc	/^    FiberIdFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::FiberIdFormatItem	file:	access:public	signature:(const std::string & str="")
FiberIdFormatItem	log.cc	/^class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
FileLogAppender	log.cc	/^FileLogAppender::FileLogAppender(const std::string& filename) $/;"	f	class:hxf::FileLogAppender	signature:(const std::string & filename)
FileLogAppender	log.h	/^    FileLogAppender(const std::string& filename);$/;"	p	class:hxf::FileLogAppender	access:public	signature:(const std::string & filename)
FileLogAppender	log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:hxf	inherits:LogAppender
FilenameFormatItem	log.cc	/^    FilenameFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::FilenameFormatItem	file:	access:public	signature:(const std::string & str="")
FilenameFormatItem	log.cc	/^class FilenameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
FormatItem	log.h	/^    class FormatItem {$/;"	c	class:hxf::LogFormatter	access:public
GetFiber	util.cc	/^uint32_t GetFiber() {$/;"	f	namespace:hxf	typeref:typename:uint32_t	signature:()
GetFiber	util.h	/^uint32_t GetFiber();$/;"	p	namespace:hxf	typeref:typename:uint32_t	signature:()
GetInstance	singleton.h	/^    static T* GetInstance() {$/;"	f	class:hxf::Singleton	typeref:typename:T *	access:public	signature:()
GetInstance	singleton.h	/^    static std::shared_ptr<T> GetInstance() {$/;"	f	class:hxf::SingletonPtr	typeref:typename:std::shared_ptr<T>	access:public	signature:()
GetThreadId	util.cc	/^pid_t GetThreadId() {$/;"	f	namespace:hxf	typeref:typename:pid_t	signature:()
GetThreadId	util.h	/^pid_t GetThreadId();$/;"	p	namespace:hxf	typeref:typename:pid_t	signature:()
HXF_LOG_DEBUG	log.h	/^#define HXF_LOG_DEBUG(/;"	d	signature:(logger)
HXF_LOG_ERROR	log.h	/^#define HXF_LOG_ERROR(/;"	d	signature:(logger)
HXF_LOG_FATAL	log.h	/^#define HXF_LOG_FATAL(/;"	d	signature:(logger)
HXF_LOG_FMT_DEBUG	log.h	/^#define HXF_LOG_FMT_DEBUG(/;"	d	signature:(logger,fmt,...)
HXF_LOG_FMT_ERROR	log.h	/^#define HXF_LOG_FMT_ERROR(/;"	d	signature:(logger,fmt,...)
HXF_LOG_FMT_FATAL	log.h	/^#define HXF_LOG_FMT_FATAL(/;"	d	signature:(logger,fmt,...)
HXF_LOG_FMT_INFO	log.h	/^#define HXF_LOG_FMT_INFO(/;"	d	signature:(logger,fmt,...)
HXF_LOG_FMT_LEVEL	log.h	/^#define HXF_LOG_FMT_LEVEL(/;"	d	signature:(logger,level,fmt,...)
HXF_LOG_FMT_WARN	log.h	/^#define HXF_LOG_FMT_WARN(/;"	d	signature:(logger,fmt,...)
HXF_LOG_INFO	log.h	/^#define HXF_LOG_INFO(/;"	d	signature:(logger)
HXF_LOG_LEVEL	log.h	/^#define HXF_LOG_LEVEL(/;"	d	signature:(logger,level)
HXF_LOG_ROOT	log.h	/^#define HXF_LOG_ROOT(/;"	d	signature:()
HXF_LOG_WARN	log.h	/^#define HXF_LOG_WARN(/;"	d	signature:(logger)
INFO	log.h	/^        INFO = 2,$/;"	e	enum:hxf::LogLevel::Level	access:public
Level	log.h	/^    enum Level {$/;"	g	class:hxf::LogLevel	access:public
LevelFormatItem	log.cc	/^    LevelFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::LevelFormatItem	file:	access:public	signature:(const std::string & str="")
LevelFormatItem	log.cc	/^class LevelFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
LineFormatItem	log.cc	/^    LineFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::LineFormatItem	file:	access:public	signature:(const std::string & str="")
LineFormatItem	log.cc	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
LogAppender	log.h	/^class LogAppender {$/;"	c	namespace:hxf
LogEvent	log.cc	/^LogEvent::LogEvent(std::shared_ptr<Logger> logger, LogLevel::Level level,$/;"	f	class:hxf::LogEvent	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const char * file,uint32_t line,uint64_t elapse,uint32_t thread_id,uint32_t fiber_id,uint64_t time)
LogEvent	log.h	/^    LogEvent(std::shared_ptr<Logger> m_logger, LogLevel::Level level,$/;"	p	class:hxf::LogEvent	access:public	signature:(std::shared_ptr<Logger> m_logger,LogLevel::Level level,const char * file,uint32_t line,uint64_t elapse,uint32_t thread_id,uint32_t fiber_id,uint64_t time)
LogEvent	log.h	/^class LogEvent {$/;"	c	namespace:hxf
LogEventWrap	log.cc	/^LogEventWrap::LogEventWrap(LogEvent::ptr e)$/;"	f	class:hxf::LogEventWrap	signature:(LogEvent::ptr e)
LogEventWrap	log.h	/^    LogEventWrap(LogEvent::ptr e);$/;"	p	class:hxf::LogEventWrap	access:public	signature:(LogEvent::ptr e)
LogEventWrap	log.h	/^class LogEventWrap {$/;"	c	namespace:hxf
LogFormatter	log.cc	/^LogFormatter::LogFormatter(const std::string& pattern)$/;"	f	class:hxf::LogFormatter	signature:(const std::string & pattern)
LogFormatter	log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:hxf::LogFormatter	access:public	signature:(const std::string & pattern)
LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:hxf
LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:hxf
Logger	log.cc	/^Logger::Logger(const std::string& name) $/;"	f	class:hxf::Logger	signature:(const std::string & name)
Logger	log.h	/^    Logger(const std::string& name = "root");    $/;"	p	class:hxf::Logger	access:public	signature:(const std::string & name="")
Logger	log.h	/^class Logger : public std::enable_shared_from_this<Logger> {$/;"	c	namespace:hxf	inherits:std::enable_shared_from_this<Logger>
LoggerManager	log.cc	/^LoggerManager::LoggerManager() { $/;"	f	class:hxf::LoggerManager	signature:()
LoggerManager	log.h	/^    LoggerManager();$/;"	p	class:hxf::LoggerManager	access:public	signature:()
LoggerManager	log.h	/^class LoggerManager {$/;"	c	namespace:hxf
LoggerMgr	log.h	/^typedef hxf::Singleton<LoggerManager> LoggerMgr; $/;"	t	namespace:hxf	typeref:typename:hxf::Singleton<LoggerManager>
Lookup	config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string& name) {$/;"	f	class:hxf::Config	typeref:typename:ConfigVar<T>::ptr	access:public	signature:(const std::string & name)
Lookup	config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string& name,$/;"	f	class:hxf::Config	typeref:typename:ConfigVar<T>::ptr	access:public	signature:(const std::string & name,const T & default_value,const std::string & description="")
MessageFormatItem	log.cc	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::MessageFormatItem	file:	access:public	signature:(const std::string & str="")
MessageFormatItem	log.cc	/^class MessageFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
NameFormatItem	log.cc	/^    NameFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::NameFormatItem	file:	access:public	signature:(const std::string & str="")
NameFormatItem	log.cc	/^class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
NewLineFormatItem	log.cc	/^    NewLineFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::NewLineFormatItem	file:	access:public	signature:(const std::string & str="")
NewLineFormatItem	log.cc	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
Singleton	singleton.h	/^class Singleton {$/;"	c	namespace:hxf
SingletonPtr	singleton.h	/^class SingletonPtr {$/;"	c	namespace:hxf
StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:hxf	inherits:LogAppender
StringFormatItem	log.cc	/^    StringFormatItem(const std::string& str)$/;"	f	class:hxf::StringFormatItem	file:	access:public	signature:(const std::string & str)
StringFormatItem	log.cc	/^class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
TabFormatItem	log.cc	/^    TabFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::TabFormatItem	file:	access:public	signature:(const std::string & str="")
TabFormatItem	log.cc	/^class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
ThreadIdFormatItem	log.cc	/^    ThreadIdFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::ThreadIdFormatItem	file:	access:public	signature:(const std::string & str="")
ThreadIdFormatItem	log.cc	/^class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
ToString	log.cc	/^const char* ToString(LogLevel::Level level) {$/;"	f	namespace:hxf	typeref:typename:const char *	signature:(LogLevel::Level level)
ToString	log.h	/^    static const char* ToString(LogLevel::Level level);$/;"	p	class:hxf::LogLevel	typeref:typename:const char *	access:public	signature:(LogLevel::Level level)
UNKNOW	log.h	/^        UNKNOW = 0,$/;"	e	enum:hxf::LogLevel::Level	access:public
WARN	log.h	/^        WARN = 3,$/;"	e	enum:hxf::LogLevel::Level	access:public
XX	log.cc	/^#define XX(/;"	d	file:	signature:(name)
XX	log.cc	/^#define XX(/;"	d	file:	signature:(str,C)
__HXF_CONFIG_H__	config.h	/^#define __HXF_CONFIG_H__$/;"	d
__HXF_LOG_H__	log.h	/^#define __HXF_LOG_H__$/;"	d
__HXF_LOG_H__	util.h	/^#define __HXF_LOG_H__$/;"	d
__HXF_SINGLETON_H__	singleton.h	/^#define __HXF_SINGLETON_H__$/;"	d
addAppender	log.cc	/^void Logger::addAppender(LogAppender::ptr appender) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
debug	log.cc	/^void Logger::debug(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
debug	log.h	/^    void debug(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
delAppender	log.cc	/^void Logger::delAppender(LogAppender::ptr appender) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
error	log.cc	/^void Logger::error(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
error	log.h	/^    void error(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
fatal	log.cc	/^void Logger::fatal(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
fatal	log.h	/^    void fatal(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::DateTimeFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::ElapseFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::FiberIdFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::FilenameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::LevelFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::LineFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::MessageFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::NameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::NewLineFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::StringFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::TabFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::ThreadIdFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^std::string LogFormatter::format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent/;"	f	class:hxf::LogFormatter	typeref:typename:std::string	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.cc	/^void LogEvent::format(const char *fmt, va_list al) {$/;"	f	class:hxf::LogEvent	typeref:typename:void	signature:(const char * fmt,va_list al)
format	log.cc	/^void LogEvent::format(const char* fmt, ...) {$/;"	f	class:hxf::LogEvent	typeref:typename:void	signature:(const char * fmt,...)
format	log.h	/^        virtual void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level le/;"	p	class:hxf::LogFormatter::FormatItem	typeref:typename:void	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.h	/^    std::string format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr even/;"	p	class:hxf::LogFormatter	typeref:typename:std::string	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	log.h	/^    void format(const char* fmt, ...);$/;"	p	class:hxf::LogEvent	typeref:typename:void	access:public	signature:(const char * fmt,...)
format	log.h	/^    void format(const char* fmt, va_list al);$/;"	p	class:hxf::LogEvent	typeref:typename:void	access:public	signature:(const char * fmt,va_list al)
fromString	config.h	/^    bool fromString(const std::string& val) override {$/;"	f	class:hxf::ConfigVar	typeref:typename:bool	access:public	signature:(const std::string & val)
fromString	config.h	/^    virtual bool fromString(const std::string& val) = 0;$/;"	p	class:hxf::ConfigVarBase	typeref:typename:bool	access:public	signature:(const std::string & val)
getContent	log.h	/^    std::string getContent() const { return m_ss.str();}$/;"	f	class:hxf::LogEvent	typeref:typename:std::string	access:public	signature:() const
getDescription	config.h	/^    std::string getDescription() const { return m_description;}$/;"	f	class:hxf::ConfigVarBase	typeref:typename:std::string	access:public	signature:() const
getElapse	log.h	/^    uint64_t getElapse() const { return m_elapse;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint64_t	access:public	signature:() const
getEvent	log.h	/^    LogEvent::ptr getEvent() const { return m_event;}$/;"	f	class:hxf::LogEventWrap	typeref:typename:LogEvent::ptr	access:public	signature:() const
getFiberId	log.h	/^    uint32_t getFiberId() const { return m_fiberId;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
getFile	log.h	/^    const char* getFile() const { return m_file;}$/;"	f	class:hxf::LogEvent	typeref:typename:const char *	access:public	signature:() const
getFormatter	log.h	/^    LogFormatter::ptr getFormatter() const { return m_formatter; }$/;"	f	class:hxf::LogAppender	typeref:typename:LogFormatter::ptr	access:public	signature:() const
getFormatter	log.h	/^    LogFormatter::ptr getFormatter() const { return m_formatter;}$/;"	f	class:hxf::Logger	typeref:typename:LogFormatter::ptr	access:public	signature:() const
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:hxf::LogEvent	typeref:typename:LogLevel::Level	access:public	signature:() const
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:hxf::Logger	typeref:typename:LogLevel::Level	access:public	signature:() const
getLine	log.h	/^    uint32_t getLine() const { return m_line;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
getLogger	log.cc	/^Logger::ptr LoggerManager::getLogger(const std::string& name) {$/;"	f	class:hxf::LoggerManager	typeref:typename:Logger::ptr	signature:(const std::string & name)
getLogger	log.h	/^    Logger::ptr getLogger(const std::string& name);$/;"	p	class:hxf::LoggerManager	typeref:typename:Logger::ptr	access:public	signature:(const std::string & name)
getLogger	log.h	/^    std::shared_ptr<Logger> getLogger() const { return m_logger;}$/;"	f	class:hxf::LogEvent	typeref:typename:std::shared_ptr<Logger>	access:public	signature:() const
getName	config.h	/^    std::string getName() const { return m_name;}$/;"	f	class:hxf::ConfigVarBase	typeref:typename:std::string	access:public	signature:() const
getName	log.h	/^    std::string getName() const { return m_name;}$/;"	f	class:hxf::Logger	typeref:typename:std::string	access:public	signature:() const
getPattern	log.h	/^    const std::string getPattern() const { return m_pattern;}$/;"	f	class:hxf::LogFormatter	typeref:typename:const std::string	access:public	signature:() const
getRoot	log.h	/^    Logger::ptr getRoot() const { return m_root;}$/;"	f	class:hxf::LoggerManager	typeref:typename:Logger::ptr	access:public	signature:() const
getSS	log.cc	/^std::stringstream& LogEventWrap::getSS() {$/;"	f	class:hxf::LogEventWrap	typeref:typename:std::stringstream &	signature:()
getSS	log.h	/^    std::stringstream& getSS() { return m_ss;}$/;"	f	class:hxf::LogEvent	typeref:typename:std::stringstream &	access:public	signature:()
getSS	log.h	/^    std::stringstream& getSS();$/;"	p	class:hxf::LogEventWrap	typeref:typename:std::stringstream &	access:public	signature:()
getThreadId	log.h	/^    uint32_t getThreadId() const { return m_threadId;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
getTime	log.h	/^    uint64_t getTime() const { return m_time;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint64_t	access:public	signature:() const
getValue	config.h	/^    const T getValue() { return m_val;}$/;"	f	class:hxf::ConfigVar	typeref:typename:const T	access:public	signature:()
hxf	config.cc	/^namespace hxf {$/;"	n	file:
hxf	config.h	/^namespace hxf {$/;"	n
hxf	log.cc	/^namespace hxf {$/;"	n	file:
hxf	log.h	/^namespace hxf {$/;"	n
hxf	singleton.h	/^namespace hxf {$/;"	n
hxf	util.cc	/^namespace hxf {$/;"	n	file:
hxf	util.h	/^namespace hxf {$/;"	n
hxf::Config	config.h	/^class Config {$/;"	c	namespace:hxf
hxf::Config::ConfigVarMap	config.h	/^    typedef std::map<std::string, ConfigVarBase::ptr> ConfigVarMap;$/;"	t	class:hxf::Config	typeref:typename:std::map<std::string,ConfigVarBase::ptr>	access:public
hxf::Config::Lookup	config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string& name) {$/;"	f	class:hxf::Config	typeref:typename:ConfigVar<T>::ptr	access:public	signature:(const std::string & name)
hxf::Config::Lookup	config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string& name,$/;"	f	class:hxf::Config	typeref:typename:ConfigVar<T>::ptr	access:public	signature:(const std::string & name,const T & default_value,const std::string & description="")
hxf::Config::s_datas	config.cc	/^Config::ConfigVarMap Config::s_datas;$/;"	m	class:hxf::Config	typeref:typename:Config::ConfigVarMap
hxf::Config::s_datas	config.h	/^    static ConfigVarMap s_datas;$/;"	m	class:hxf::Config	typeref:typename:ConfigVarMap	access:private
hxf::ConfigVar	config.h	/^class ConfigVar : public ConfigVarBase {$/;"	c	namespace:hxf	inherits:ConfigVarBase
hxf::ConfigVar::ConfigVar	config.h	/^    ConfigVar(const std::string& name,$/;"	f	class:hxf::ConfigVar	access:public	signature:(const std::string & name,const T & default_value,const std::string & description="")
hxf::ConfigVar::fromString	config.h	/^    bool fromString(const std::string& val) override {$/;"	f	class:hxf::ConfigVar	typeref:typename:bool	access:public	signature:(const std::string & val)
hxf::ConfigVar::getValue	config.h	/^    const T getValue() { return m_val;}$/;"	f	class:hxf::ConfigVar	typeref:typename:const T	access:public	signature:()
hxf::ConfigVar::m_val	config.h	/^    T m_val;$/;"	m	class:hxf::ConfigVar	typeref:typename:T	access:private
hxf::ConfigVar::ptr	config.h	/^    typedef std::shared_ptr<ConfigVar> ptr;$/;"	t	class:hxf::ConfigVar	typeref:typename:std::shared_ptr<ConfigVar>	access:public
hxf::ConfigVar::setValue	config.h	/^    void setValue(const T& v) { m_val = v;}$/;"	f	class:hxf::ConfigVar	typeref:typename:void	access:public	signature:(const T & v)
hxf::ConfigVar::toString	config.h	/^    std::string toString() override {$/;"	f	class:hxf::ConfigVar	typeref:typename:std::string	access:public	signature:()
hxf::ConfigVarBase	config.h	/^class ConfigVarBase{$/;"	c	namespace:hxf
hxf::ConfigVarBase::ConfigVarBase	config.h	/^    ConfigVarBase(const std::string& name, const std::string& description) $/;"	f	class:hxf::ConfigVarBase	access:public	signature:(const std::string & name,const std::string & description)
hxf::ConfigVarBase::fromString	config.h	/^    virtual bool fromString(const std::string& val) = 0;$/;"	p	class:hxf::ConfigVarBase	typeref:typename:bool	access:public	signature:(const std::string & val)
hxf::ConfigVarBase::getDescription	config.h	/^    std::string getDescription() const { return m_description;}$/;"	f	class:hxf::ConfigVarBase	typeref:typename:std::string	access:public	signature:() const
hxf::ConfigVarBase::getName	config.h	/^    std::string getName() const { return m_name;}$/;"	f	class:hxf::ConfigVarBase	typeref:typename:std::string	access:public	signature:() const
hxf::ConfigVarBase::m_description	config.h	/^    std::string m_description;$/;"	m	class:hxf::ConfigVarBase	typeref:typename:std::string	access:protected
hxf::ConfigVarBase::m_name	config.h	/^    std::string m_name;$/;"	m	class:hxf::ConfigVarBase	typeref:typename:std::string	access:protected
hxf::ConfigVarBase::ptr	config.h	/^    typedef std::shared_ptr<ConfigVarBase> ptr;$/;"	t	class:hxf::ConfigVarBase	typeref:typename:std::shared_ptr<ConfigVarBase>	access:public
hxf::ConfigVarBase::toString	config.h	/^    virtual std::string toString() = 0; $/;"	p	class:hxf::ConfigVarBase	typeref:typename:std::string	access:public	signature:()
hxf::ConfigVarBase::~ConfigVarBase	config.h	/^    virtual ~ConfigVarBase() {}$/;"	f	class:hxf::ConfigVarBase	access:public	signature:()
hxf::DateTimeFormatItem	log.cc	/^class DateTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::DateTimeFormatItem::DateTimeFormatItem	log.cc	/^    DateTimeFormatItem(const std::string& format = "%Y:%m:%d %H:%M:%S") $/;"	f	class:hxf::DateTimeFormatItem	file:	access:public	signature:(const std::string & format="")
hxf::DateTimeFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::DateTimeFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::DateTimeFormatItem::m_format	log.cc	/^    std::string m_format;$/;"	m	class:hxf::DateTimeFormatItem	typeref:typename:std::string	file:	access:private
hxf::ElapseFormatItem	log.cc	/^class ElapseFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::ElapseFormatItem::ElapseFormatItem	log.cc	/^    ElapseFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::ElapseFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::ElapseFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::ElapseFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::FiberIdFormatItem	log.cc	/^class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::FiberIdFormatItem::FiberIdFormatItem	log.cc	/^    FiberIdFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::FiberIdFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::FiberIdFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::FiberIdFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::FileLogAppender	log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:hxf	inherits:LogAppender
hxf::FileLogAppender::FileLogAppender	log.cc	/^FileLogAppender::FileLogAppender(const std::string& filename) $/;"	f	class:hxf::FileLogAppender	signature:(const std::string & filename)
hxf::FileLogAppender::FileLogAppender	log.h	/^    FileLogAppender(const std::string& filename);$/;"	p	class:hxf::FileLogAppender	access:public	signature:(const std::string & filename)
hxf::FileLogAppender::log	log.cc	/^void FileLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEvent:/;"	f	class:hxf::FileLogAppender	typeref:typename:void	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
hxf::FileLogAppender::log	log.h	/^    void log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEvent::ptr event) o/;"	p	class:hxf::FileLogAppender	typeref:typename:void	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
hxf::FileLogAppender::m_filename	log.h	/^    std::string m_filename;$/;"	m	class:hxf::FileLogAppender	typeref:typename:std::string	access:private
hxf::FileLogAppender::m_ofstream	log.h	/^    std::ofstream m_ofstream;$/;"	m	class:hxf::FileLogAppender	typeref:typename:std::ofstream	access:private
hxf::FileLogAppender::ptr	log.h	/^    typedef std::shared_ptr<FileLogAppender> ptr;$/;"	t	class:hxf::FileLogAppender	typeref:typename:std::shared_ptr<FileLogAppender>	access:public
hxf::FileLogAppender::reopen	log.cc	/^bool FileLogAppender::reopen() {$/;"	f	class:hxf::FileLogAppender	typeref:typename:bool	signature:()
hxf::FileLogAppender::reopen	log.h	/^    bool reopen();$/;"	p	class:hxf::FileLogAppender	typeref:typename:bool	access:public	signature:()
hxf::FilenameFormatItem	log.cc	/^class FilenameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::FilenameFormatItem::FilenameFormatItem	log.cc	/^    FilenameFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::FilenameFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::FilenameFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::FilenameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::GetFiber	util.cc	/^uint32_t GetFiber() {$/;"	f	namespace:hxf	typeref:typename:uint32_t	signature:()
hxf::GetFiber	util.h	/^uint32_t GetFiber();$/;"	p	namespace:hxf	typeref:typename:uint32_t	signature:()
hxf::GetThreadId	util.cc	/^pid_t GetThreadId() {$/;"	f	namespace:hxf	typeref:typename:pid_t	signature:()
hxf::GetThreadId	util.h	/^pid_t GetThreadId();$/;"	p	namespace:hxf	typeref:typename:pid_t	signature:()
hxf::LevelFormatItem	log.cc	/^class LevelFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::LevelFormatItem::LevelFormatItem	log.cc	/^    LevelFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::LevelFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::LevelFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::LevelFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::LineFormatItem	log.cc	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::LineFormatItem::LineFormatItem	log.cc	/^    LineFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::LineFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::LineFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::LineFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::LogAppender	log.h	/^class LogAppender {$/;"	c	namespace:hxf
hxf::LogAppender::getFormatter	log.h	/^    LogFormatter::ptr getFormatter() const { return m_formatter; }$/;"	f	class:hxf::LogAppender	typeref:typename:LogFormatter::ptr	access:public	signature:() const
hxf::LogAppender::log	log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEvent::ptr /;"	p	class:hxf::LogAppender	typeref:typename:void	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
hxf::LogAppender::m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:hxf::LogAppender	typeref:typename:LogFormatter::ptr	access:protected
hxf::LogAppender::m_level	log.h	/^    LogLevel::Level m_level = LogLevel::Level::DEBUG;$/;"	m	class:hxf::LogAppender	typeref:typename:LogLevel::Level	access:protected
hxf::LogAppender::ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:hxf::LogAppender	typeref:typename:std::shared_ptr<LogAppender>	access:public
hxf::LogAppender::setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr val) { m_formatter = val; }$/;"	f	class:hxf::LogAppender	typeref:typename:void	access:public	signature:(LogFormatter::ptr val)
hxf::LogAppender::~LogAppender	log.h	/^    virtual ~LogAppender(){}$/;"	f	class:hxf::LogAppender	access:public	signature:()
hxf::LogEvent	log.h	/^class LogEvent {$/;"	c	namespace:hxf
hxf::LogEvent::LogEvent	log.cc	/^LogEvent::LogEvent(std::shared_ptr<Logger> logger, LogLevel::Level level,$/;"	f	class:hxf::LogEvent	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const char * file,uint32_t line,uint64_t elapse,uint32_t thread_id,uint32_t fiber_id,uint64_t time)
hxf::LogEvent::LogEvent	log.h	/^    LogEvent(std::shared_ptr<Logger> m_logger, LogLevel::Level level,$/;"	p	class:hxf::LogEvent	access:public	signature:(std::shared_ptr<Logger> m_logger,LogLevel::Level level,const char * file,uint32_t line,uint64_t elapse,uint32_t thread_id,uint32_t fiber_id,uint64_t time)
hxf::LogEvent::format	log.cc	/^void LogEvent::format(const char *fmt, va_list al) {$/;"	f	class:hxf::LogEvent	typeref:typename:void	signature:(const char * fmt,va_list al)
hxf::LogEvent::format	log.cc	/^void LogEvent::format(const char* fmt, ...) {$/;"	f	class:hxf::LogEvent	typeref:typename:void	signature:(const char * fmt,...)
hxf::LogEvent::format	log.h	/^    void format(const char* fmt, ...);$/;"	p	class:hxf::LogEvent	typeref:typename:void	access:public	signature:(const char * fmt,...)
hxf::LogEvent::format	log.h	/^    void format(const char* fmt, va_list al);$/;"	p	class:hxf::LogEvent	typeref:typename:void	access:public	signature:(const char * fmt,va_list al)
hxf::LogEvent::getContent	log.h	/^    std::string getContent() const { return m_ss.str();}$/;"	f	class:hxf::LogEvent	typeref:typename:std::string	access:public	signature:() const
hxf::LogEvent::getElapse	log.h	/^    uint64_t getElapse() const { return m_elapse;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint64_t	access:public	signature:() const
hxf::LogEvent::getFiberId	log.h	/^    uint32_t getFiberId() const { return m_fiberId;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
hxf::LogEvent::getFile	log.h	/^    const char* getFile() const { return m_file;}$/;"	f	class:hxf::LogEvent	typeref:typename:const char *	access:public	signature:() const
hxf::LogEvent::getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:hxf::LogEvent	typeref:typename:LogLevel::Level	access:public	signature:() const
hxf::LogEvent::getLine	log.h	/^    uint32_t getLine() const { return m_line;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
hxf::LogEvent::getLogger	log.h	/^    std::shared_ptr<Logger> getLogger() const { return m_logger;}$/;"	f	class:hxf::LogEvent	typeref:typename:std::shared_ptr<Logger>	access:public	signature:() const
hxf::LogEvent::getSS	log.h	/^    std::stringstream& getSS() { return m_ss;}$/;"	f	class:hxf::LogEvent	typeref:typename:std::stringstream &	access:public	signature:()
hxf::LogEvent::getThreadId	log.h	/^    uint32_t getThreadId() const { return m_threadId;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
hxf::LogEvent::getTime	log.h	/^    uint64_t getTime() const { return m_time;}$/;"	f	class:hxf::LogEvent	typeref:typename:uint64_t	access:public	signature:() const
hxf::LogEvent::m_elapse	log.h	/^    uint64_t m_elapse = 0;         \/\/ 程序启动到现在的毫秒数$/;"	m	class:hxf::LogEvent	typeref:typename:uint64_t	access:private
hxf::LogEvent::m_fiberId	log.h	/^    uint32_t m_fiberId = 0;        \/\/ 协程号$/;"	m	class:hxf::LogEvent	typeref:typename:uint32_t	access:private
hxf::LogEvent::m_file	log.h	/^    const char* m_file = nullptr;  \/\/ 文件名$/;"	m	class:hxf::LogEvent	typeref:typename:const char *	access:private
hxf::LogEvent::m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:hxf::LogEvent	typeref:typename:LogLevel::Level	access:private
hxf::LogEvent::m_line	log.h	/^    uint32_t m_line = 0;           \/\/ 行号$/;"	m	class:hxf::LogEvent	typeref:typename:uint32_t	access:private
hxf::LogEvent::m_logger	log.h	/^    std::shared_ptr<Logger> m_logger;$/;"	m	class:hxf::LogEvent	typeref:typename:std::shared_ptr<Logger>	access:private
hxf::LogEvent::m_ss	log.h	/^    std::stringstream m_ss;        \/\/ 内容字符串流$/;"	m	class:hxf::LogEvent	typeref:typename:std::stringstream	access:private
hxf::LogEvent::m_threadId	log.h	/^    uint32_t m_threadId = 0;       \/\/ 线程号$/;"	m	class:hxf::LogEvent	typeref:typename:uint32_t	access:private
hxf::LogEvent::m_time	log.h	/^    uint64_t m_time = 0;           \/\/ 时间戳$/;"	m	class:hxf::LogEvent	typeref:typename:uint64_t	access:private
hxf::LogEvent::ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:hxf::LogEvent	typeref:typename:std::shared_ptr<LogEvent>	access:public
hxf::LogEventWrap	log.h	/^class LogEventWrap {$/;"	c	namespace:hxf
hxf::LogEventWrap::LogEventWrap	log.cc	/^LogEventWrap::LogEventWrap(LogEvent::ptr e)$/;"	f	class:hxf::LogEventWrap	signature:(LogEvent::ptr e)
hxf::LogEventWrap::LogEventWrap	log.h	/^    LogEventWrap(LogEvent::ptr e);$/;"	p	class:hxf::LogEventWrap	access:public	signature:(LogEvent::ptr e)
hxf::LogEventWrap::getEvent	log.h	/^    LogEvent::ptr getEvent() const { return m_event;}$/;"	f	class:hxf::LogEventWrap	typeref:typename:LogEvent::ptr	access:public	signature:() const
hxf::LogEventWrap::getSS	log.cc	/^std::stringstream& LogEventWrap::getSS() {$/;"	f	class:hxf::LogEventWrap	typeref:typename:std::stringstream &	signature:()
hxf::LogEventWrap::getSS	log.h	/^    std::stringstream& getSS();$/;"	p	class:hxf::LogEventWrap	typeref:typename:std::stringstream &	access:public	signature:()
hxf::LogEventWrap::m_event	log.h	/^    LogEvent::ptr m_event;$/;"	m	class:hxf::LogEventWrap	typeref:typename:LogEvent::ptr	access:private
hxf::LogEventWrap::~LogEventWrap	log.cc	/^LogEventWrap::~LogEventWrap() {$/;"	f	class:hxf::LogEventWrap	signature:()
hxf::LogEventWrap::~LogEventWrap	log.h	/^    ~LogEventWrap();$/;"	p	class:hxf::LogEventWrap	access:public	signature:()
hxf::LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:hxf
hxf::LogFormatter::FormatItem	log.h	/^    class FormatItem {$/;"	c	class:hxf::LogFormatter	access:public
hxf::LogFormatter::FormatItem::format	log.h	/^        virtual void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level le/;"	p	class:hxf::LogFormatter::FormatItem	typeref:typename:void	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::LogFormatter::FormatItem::ptr	log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:hxf::LogFormatter::FormatItem	typeref:typename:std::shared_ptr<FormatItem>	access:public
hxf::LogFormatter::FormatItem::~FormatItem	log.h	/^        virtual ~FormatItem(){}$/;"	f	class:hxf::LogFormatter::FormatItem	access:public	signature:()
hxf::LogFormatter::LogFormatter	log.cc	/^LogFormatter::LogFormatter(const std::string& pattern)$/;"	f	class:hxf::LogFormatter	signature:(const std::string & pattern)
hxf::LogFormatter::LogFormatter	log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:hxf::LogFormatter	access:public	signature:(const std::string & pattern)
hxf::LogFormatter::format	log.cc	/^std::string LogFormatter::format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent/;"	f	class:hxf::LogFormatter	typeref:typename:std::string	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::LogFormatter::format	log.h	/^    std::string format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr even/;"	p	class:hxf::LogFormatter	typeref:typename:std::string	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::LogFormatter::getPattern	log.h	/^    const std::string getPattern() const { return m_pattern;}$/;"	f	class:hxf::LogFormatter	typeref:typename:const std::string	access:public	signature:() const
hxf::LogFormatter::init	log.cc	/^void LogFormatter::init() {$/;"	f	class:hxf::LogFormatter	typeref:typename:void	signature:()
hxf::LogFormatter::init	log.h	/^    void init();$/;"	p	class:hxf::LogFormatter	typeref:typename:void	access:public	signature:()
hxf::LogFormatter::isError	log.h	/^    bool isError() const { return m_error;}$/;"	f	class:hxf::LogFormatter	typeref:typename:bool	access:public	signature:() const
hxf::LogFormatter::m_error	log.h	/^    bool m_error;$/;"	m	class:hxf::LogFormatter	typeref:typename:bool	access:private
hxf::LogFormatter::m_items	log.h	/^    std::vector<FormatItem::ptr> m_items;$/;"	m	class:hxf::LogFormatter	typeref:typename:std::vector<FormatItem::ptr>	access:private
hxf::LogFormatter::m_pattern	log.h	/^    std::string m_pattern;$/;"	m	class:hxf::LogFormatter	typeref:typename:std::string	access:private
hxf::LogFormatter::ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:hxf::LogFormatter	typeref:typename:std::shared_ptr<LogFormatter>	access:public
hxf::LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:hxf
hxf::LogLevel::DEBUG	log.h	/^        DEBUG = 1,$/;"	e	enum:hxf::LogLevel::Level	access:public
hxf::LogLevel::ERROR	log.h	/^        ERROR = 4,$/;"	e	enum:hxf::LogLevel::Level	access:public
hxf::LogLevel::FATAL	log.h	/^        FATAL = 5$/;"	e	enum:hxf::LogLevel::Level	access:public
hxf::LogLevel::INFO	log.h	/^        INFO = 2,$/;"	e	enum:hxf::LogLevel::Level	access:public
hxf::LogLevel::Level	log.h	/^    enum Level {$/;"	g	class:hxf::LogLevel	access:public
hxf::LogLevel::ToString	log.h	/^    static const char* ToString(LogLevel::Level level);$/;"	p	class:hxf::LogLevel	typeref:typename:const char *	access:public	signature:(LogLevel::Level level)
hxf::LogLevel::UNKNOW	log.h	/^        UNKNOW = 0,$/;"	e	enum:hxf::LogLevel::Level	access:public
hxf::LogLevel::WARN	log.h	/^        WARN = 3,$/;"	e	enum:hxf::LogLevel::Level	access:public
hxf::Logger	log.h	/^class Logger : public std::enable_shared_from_this<Logger> {$/;"	c	namespace:hxf	inherits:std::enable_shared_from_this<Logger>
hxf::Logger::Logger	log.cc	/^Logger::Logger(const std::string& name) $/;"	f	class:hxf::Logger	signature:(const std::string & name)
hxf::Logger::Logger	log.h	/^    Logger(const std::string& name = "root");    $/;"	p	class:hxf::Logger	access:public	signature:(const std::string & name="")
hxf::Logger::addAppender	log.cc	/^void Logger::addAppender(LogAppender::ptr appender) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
hxf::Logger::addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
hxf::Logger::debug	log.cc	/^void Logger::debug(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
hxf::Logger::debug	log.h	/^    void debug(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
hxf::Logger::delAppender	log.cc	/^void Logger::delAppender(LogAppender::ptr appender) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
hxf::Logger::delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
hxf::Logger::error	log.cc	/^void Logger::error(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
hxf::Logger::error	log.h	/^    void error(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
hxf::Logger::fatal	log.cc	/^void Logger::fatal(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
hxf::Logger::fatal	log.h	/^    void fatal(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
hxf::Logger::getFormatter	log.h	/^    LogFormatter::ptr getFormatter() const { return m_formatter;}$/;"	f	class:hxf::Logger	typeref:typename:LogFormatter::ptr	access:public	signature:() const
hxf::Logger::getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:hxf::Logger	typeref:typename:LogLevel::Level	access:public	signature:() const
hxf::Logger::getName	log.h	/^    std::string getName() const { return m_name;}$/;"	f	class:hxf::Logger	typeref:typename:std::string	access:public	signature:() const
hxf::Logger::info	log.cc	/^void Logger::info(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
hxf::Logger::info	log.h	/^    void info(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
hxf::Logger::log	log.cc	/^void Logger::log(LogLevel::Level level, const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(LogLevel::Level level,const LogEvent::ptr event)
hxf::Logger::log	log.h	/^    void log(LogLevel::Level level, const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level level,const LogEvent::ptr event)
hxf::Logger::m_appenders	log.h	/^    std::list<LogAppender::ptr> m_appenders;$/;"	m	class:hxf::Logger	typeref:typename:std::list<LogAppender::ptr>	access:private
hxf::Logger::m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:hxf::Logger	typeref:typename:LogFormatter::ptr	access:private
hxf::Logger::m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:hxf::Logger	typeref:typename:LogLevel::Level	access:private
hxf::Logger::m_name	log.h	/^    std::string m_name;$/;"	m	class:hxf::Logger	typeref:typename:std::string	access:private
hxf::Logger::ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:hxf::Logger	typeref:typename:std::shared_ptr<Logger>	access:public
hxf::Logger::wran	log.cc	/^void Logger::wran(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
hxf::Logger::wran	log.h	/^    void wran(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
hxf::LoggerManager	log.h	/^class LoggerManager {$/;"	c	namespace:hxf
hxf::LoggerManager::LoggerManager	log.cc	/^LoggerManager::LoggerManager() { $/;"	f	class:hxf::LoggerManager	signature:()
hxf::LoggerManager::LoggerManager	log.h	/^    LoggerManager();$/;"	p	class:hxf::LoggerManager	access:public	signature:()
hxf::LoggerManager::getLogger	log.cc	/^Logger::ptr LoggerManager::getLogger(const std::string& name) {$/;"	f	class:hxf::LoggerManager	typeref:typename:Logger::ptr	signature:(const std::string & name)
hxf::LoggerManager::getLogger	log.h	/^    Logger::ptr getLogger(const std::string& name);$/;"	p	class:hxf::LoggerManager	typeref:typename:Logger::ptr	access:public	signature:(const std::string & name)
hxf::LoggerManager::getRoot	log.h	/^    Logger::ptr getRoot() const { return m_root;}$/;"	f	class:hxf::LoggerManager	typeref:typename:Logger::ptr	access:public	signature:() const
hxf::LoggerManager::init	log.h	/^    void init() {}$/;"	f	class:hxf::LoggerManager	typeref:typename:void	access:public	signature:()
hxf::LoggerManager::m_loggers	log.h	/^    std::map<std::string, Logger::ptr> m_loggers;$/;"	m	class:hxf::LoggerManager	typeref:typename:std::map<std::string,Logger::ptr>	access:private
hxf::LoggerManager::m_root	log.h	/^    Logger::ptr m_root;$/;"	m	class:hxf::LoggerManager	typeref:typename:Logger::ptr	access:private
hxf::LoggerMgr	log.h	/^typedef hxf::Singleton<LoggerManager> LoggerMgr; $/;"	t	namespace:hxf	typeref:typename:hxf::Singleton<LoggerManager>
hxf::MessageFormatItem	log.cc	/^class MessageFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::MessageFormatItem::MessageFormatItem	log.cc	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::MessageFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::MessageFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::MessageFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::NameFormatItem	log.cc	/^class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::NameFormatItem::NameFormatItem	log.cc	/^    NameFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::NameFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::NameFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::NameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::NewLineFormatItem	log.cc	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::NewLineFormatItem::NewLineFormatItem	log.cc	/^    NewLineFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::NewLineFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::NewLineFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::NewLineFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::Singleton	singleton.h	/^class Singleton {$/;"	c	namespace:hxf
hxf::Singleton::GetInstance	singleton.h	/^    static T* GetInstance() {$/;"	f	class:hxf::Singleton	typeref:typename:T *	access:public	signature:()
hxf::SingletonPtr	singleton.h	/^class SingletonPtr {$/;"	c	namespace:hxf
hxf::SingletonPtr::GetInstance	singleton.h	/^    static std::shared_ptr<T> GetInstance() {$/;"	f	class:hxf::SingletonPtr	typeref:typename:std::shared_ptr<T>	access:public	signature:()
hxf::StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:hxf	inherits:LogAppender
hxf::StdoutLogAppender::log	log.cc	/^void StdoutLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEven/;"	f	class:hxf::StdoutLogAppender	typeref:typename:void	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
hxf::StdoutLogAppender::log	log.h	/^    void log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEvent::ptr event) o/;"	p	class:hxf::StdoutLogAppender	typeref:typename:void	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
hxf::StdoutLogAppender::ptr	log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:hxf::StdoutLogAppender	typeref:typename:std::shared_ptr<StdoutLogAppender>	access:public
hxf::StringFormatItem	log.cc	/^class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::StringFormatItem::StringFormatItem	log.cc	/^    StringFormatItem(const std::string& str)$/;"	f	class:hxf::StringFormatItem	file:	access:public	signature:(const std::string & str)
hxf::StringFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::StringFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::StringFormatItem::m_string	log.cc	/^    std::string m_string;$/;"	m	class:hxf::StringFormatItem	typeref:typename:std::string	file:	access:private
hxf::TabFormatItem	log.cc	/^class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::TabFormatItem::TabFormatItem	log.cc	/^    TabFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::TabFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::TabFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::TabFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::ThreadIdFormatItem	log.cc	/^class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:hxf	file:	inherits:LogFormatter::FormatItem
hxf::ThreadIdFormatItem::ThreadIdFormatItem	log.cc	/^    ThreadIdFormatItem(const std::string& str = "") {}$/;"	f	class:hxf::ThreadIdFormatItem	file:	access:public	signature:(const std::string & str="")
hxf::ThreadIdFormatItem::format	log.cc	/^    void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEven/;"	f	class:hxf::ThreadIdFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
hxf::ToString	log.cc	/^const char* ToString(LogLevel::Level level) {$/;"	f	namespace:hxf	typeref:typename:const char *	signature:(LogLevel::Level level)
info	log.cc	/^void Logger::info(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
info	log.h	/^    void info(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
init	log.cc	/^void LogFormatter::init() {$/;"	f	class:hxf::LogFormatter	typeref:typename:void	signature:()
init	log.h	/^    void init() {}$/;"	f	class:hxf::LoggerManager	typeref:typename:void	access:public	signature:()
init	log.h	/^    void init();$/;"	p	class:hxf::LogFormatter	typeref:typename:void	access:public	signature:()
isError	log.h	/^    bool isError() const { return m_error;}$/;"	f	class:hxf::LogFormatter	typeref:typename:bool	access:public	signature:() const
log	log.cc	/^void FileLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEvent:/;"	f	class:hxf::FileLogAppender	typeref:typename:void	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
log	log.cc	/^void Logger::log(LogLevel::Level level, const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(LogLevel::Level level,const LogEvent::ptr event)
log	log.cc	/^void StdoutLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEven/;"	f	class:hxf::StdoutLogAppender	typeref:typename:void	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
log	log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEvent::ptr /;"	p	class:hxf::LogAppender	typeref:typename:void	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
log	log.h	/^    void log(LogLevel::Level level, const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level level,const LogEvent::ptr event)
log	log.h	/^    void log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEvent::ptr event) o/;"	p	class:hxf::FileLogAppender	typeref:typename:void	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
log	log.h	/^    void log(std::shared_ptr<Logger> logger, LogLevel::Level level, const LogEvent::ptr event) o/;"	p	class:hxf::StdoutLogAppender	typeref:typename:void	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const LogEvent::ptr event)
m_appenders	log.h	/^    std::list<LogAppender::ptr> m_appenders;$/;"	m	class:hxf::Logger	typeref:typename:std::list<LogAppender::ptr>	access:private
m_description	config.h	/^    std::string m_description;$/;"	m	class:hxf::ConfigVarBase	typeref:typename:std::string	access:protected
m_elapse	log.h	/^    uint64_t m_elapse = 0;         \/\/ 程序启动到现在的毫秒数$/;"	m	class:hxf::LogEvent	typeref:typename:uint64_t	access:private
m_error	log.h	/^    bool m_error;$/;"	m	class:hxf::LogFormatter	typeref:typename:bool	access:private
m_event	log.h	/^    LogEvent::ptr m_event;$/;"	m	class:hxf::LogEventWrap	typeref:typename:LogEvent::ptr	access:private
m_fiberId	log.h	/^    uint32_t m_fiberId = 0;        \/\/ 协程号$/;"	m	class:hxf::LogEvent	typeref:typename:uint32_t	access:private
m_file	log.h	/^    const char* m_file = nullptr;  \/\/ 文件名$/;"	m	class:hxf::LogEvent	typeref:typename:const char *	access:private
m_filename	log.h	/^    std::string m_filename;$/;"	m	class:hxf::FileLogAppender	typeref:typename:std::string	access:private
m_format	log.cc	/^    std::string m_format;$/;"	m	class:hxf::DateTimeFormatItem	typeref:typename:std::string	file:	access:private
m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:hxf::LogAppender	typeref:typename:LogFormatter::ptr	access:protected
m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:hxf::Logger	typeref:typename:LogFormatter::ptr	access:private
m_items	log.h	/^    std::vector<FormatItem::ptr> m_items;$/;"	m	class:hxf::LogFormatter	typeref:typename:std::vector<FormatItem::ptr>	access:private
m_level	log.h	/^    LogLevel::Level m_level = LogLevel::Level::DEBUG;$/;"	m	class:hxf::LogAppender	typeref:typename:LogLevel::Level	access:protected
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:hxf::LogEvent	typeref:typename:LogLevel::Level	access:private
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:hxf::Logger	typeref:typename:LogLevel::Level	access:private
m_line	log.h	/^    uint32_t m_line = 0;           \/\/ 行号$/;"	m	class:hxf::LogEvent	typeref:typename:uint32_t	access:private
m_logger	log.h	/^    std::shared_ptr<Logger> m_logger;$/;"	m	class:hxf::LogEvent	typeref:typename:std::shared_ptr<Logger>	access:private
m_loggers	log.h	/^    std::map<std::string, Logger::ptr> m_loggers;$/;"	m	class:hxf::LoggerManager	typeref:typename:std::map<std::string,Logger::ptr>	access:private
m_name	config.h	/^    std::string m_name;$/;"	m	class:hxf::ConfigVarBase	typeref:typename:std::string	access:protected
m_name	log.h	/^    std::string m_name;$/;"	m	class:hxf::Logger	typeref:typename:std::string	access:private
m_ofstream	log.h	/^    std::ofstream m_ofstream;$/;"	m	class:hxf::FileLogAppender	typeref:typename:std::ofstream	access:private
m_pattern	log.h	/^    std::string m_pattern;$/;"	m	class:hxf::LogFormatter	typeref:typename:std::string	access:private
m_root	log.h	/^    Logger::ptr m_root;$/;"	m	class:hxf::LoggerManager	typeref:typename:Logger::ptr	access:private
m_ss	log.h	/^    std::stringstream m_ss;        \/\/ 内容字符串流$/;"	m	class:hxf::LogEvent	typeref:typename:std::stringstream	access:private
m_string	log.cc	/^    std::string m_string;$/;"	m	class:hxf::StringFormatItem	typeref:typename:std::string	file:	access:private
m_threadId	log.h	/^    uint32_t m_threadId = 0;       \/\/ 线程号$/;"	m	class:hxf::LogEvent	typeref:typename:uint32_t	access:private
m_time	log.h	/^    uint64_t m_time = 0;           \/\/ 时间戳$/;"	m	class:hxf::LogEvent	typeref:typename:uint64_t	access:private
m_val	config.h	/^    T m_val;$/;"	m	class:hxf::ConfigVar	typeref:typename:T	access:private
ptr	config.h	/^    typedef std::shared_ptr<ConfigVar> ptr;$/;"	t	class:hxf::ConfigVar	typeref:typename:std::shared_ptr<ConfigVar>	access:public
ptr	config.h	/^    typedef std::shared_ptr<ConfigVarBase> ptr;$/;"	t	class:hxf::ConfigVarBase	typeref:typename:std::shared_ptr<ConfigVarBase>	access:public
ptr	log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:hxf::LogFormatter::FormatItem	typeref:typename:std::shared_ptr<FormatItem>	access:public
ptr	log.h	/^    typedef std::shared_ptr<FileLogAppender> ptr;$/;"	t	class:hxf::FileLogAppender	typeref:typename:std::shared_ptr<FileLogAppender>	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:hxf::LogAppender	typeref:typename:std::shared_ptr<LogAppender>	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:hxf::LogEvent	typeref:typename:std::shared_ptr<LogEvent>	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:hxf::LogFormatter	typeref:typename:std::shared_ptr<LogFormatter>	access:public
ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:hxf::Logger	typeref:typename:std::shared_ptr<Logger>	access:public
ptr	log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:hxf::StdoutLogAppender	typeref:typename:std::shared_ptr<StdoutLogAppender>	access:public
reopen	log.cc	/^bool FileLogAppender::reopen() {$/;"	f	class:hxf::FileLogAppender	typeref:typename:bool	signature:()
reopen	log.h	/^    bool reopen();$/;"	p	class:hxf::FileLogAppender	typeref:typename:bool	access:public	signature:()
s_datas	config.cc	/^Config::ConfigVarMap Config::s_datas;$/;"	m	class:hxf::Config	typeref:typename:Config::ConfigVarMap
s_datas	config.h	/^    static ConfigVarMap s_datas;$/;"	m	class:hxf::Config	typeref:typename:ConfigVarMap	access:private
setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr val) { m_formatter = val; }$/;"	f	class:hxf::LogAppender	typeref:typename:void	access:public	signature:(LogFormatter::ptr val)
setValue	config.h	/^    void setValue(const T& v) { m_val = v;}$/;"	f	class:hxf::ConfigVar	typeref:typename:void	access:public	signature:(const T & v)
toString	config.h	/^    std::string toString() override {$/;"	f	class:hxf::ConfigVar	typeref:typename:std::string	access:public	signature:()
toString	config.h	/^    virtual std::string toString() = 0; $/;"	p	class:hxf::ConfigVarBase	typeref:typename:std::string	access:public	signature:()
wran	log.cc	/^void Logger::wran(const LogEvent::ptr event) {$/;"	f	class:hxf::Logger	typeref:typename:void	signature:(const LogEvent::ptr event)
wran	log.h	/^    void wran(const LogEvent::ptr event);$/;"	p	class:hxf::Logger	typeref:typename:void	access:public	signature:(const LogEvent::ptr event)
~ConfigVarBase	config.h	/^    virtual ~ConfigVarBase() {}$/;"	f	class:hxf::ConfigVarBase	access:public	signature:()
~FormatItem	log.h	/^        virtual ~FormatItem(){}$/;"	f	class:hxf::LogFormatter::FormatItem	access:public	signature:()
~LogAppender	log.h	/^    virtual ~LogAppender(){}$/;"	f	class:hxf::LogAppender	access:public	signature:()
~LogEventWrap	log.cc	/^LogEventWrap::~LogEventWrap() {$/;"	f	class:hxf::LogEventWrap	signature:()
~LogEventWrap	log.h	/^    ~LogEventWrap();$/;"	p	class:hxf::LogEventWrap	access:public	signature:()
